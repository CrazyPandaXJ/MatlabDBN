
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <!--
This HTML is auto-generated from an M-file.
To make changes, update the M-file and republish this document.
      --><title>Compiling and calling other languages</title><meta name="generator" content="MATLAB 7.10"><meta name="date" content="2010-07-16"><meta name="m-file" content="external"><style type="text/css">

body {
  background-color: white;
  margin:10px;
}

h1 {
  color: #990000; 
  font-size: x-large;
}

h2 {
  color: #990000;
  font-size: medium;
}

/* Make the text shrink to fit narrow windows, but not stretch too far in 
wide windows. */ 
p,h1,h2,div.content div {
  max-width: 600px;
  /* Hack for IE6 */
  width: auto !important; width: 600px;
}

pre.codeinput {
  background: #EEEEEE;
  padding: 10px;
}
@media print {
  pre.codeinput {word-wrap:break-word; width:100%;}
} 

span.keyword {color: #0000FF}
span.comment {color: #228B22}
span.string {color: #A020F0}
span.untermstring {color: #B20000}
span.syscmd {color: #B28C00}

pre.codeoutput {
  color: #666666;
  padding: 10px;
}

pre.error {
  color: red;
}

p.footer {
  text-align: right;
  font-size: xx-small;
  font-weight: lighter;
  font-style: italic;
  color: gray;
}

  </style></head><body><div class="content"><h1>Compiling and calling other languages</h1><!--introduction--><p>Matlab is an extremely powerful programming environment, but it can still be useful to call other languages for various reasons, such as speed (C) or existence of pre-canned packages (R) or data structures (Java). In this chapter, we show how to do this.</p><!--/introduction--><h2>Contents</h2><div><ul><li><a href="#1">System Commands</a></li><li><a href="#3">Eval</a></li><li><a href="#7">Calling Java</a></li><li><a href="#20">Java hash tables</a></li><li><a href="#22">Calling R</a></li><li><a href="#24">Calling R using the DCOM interface (Windows only)</a></li><li><a href="#29">Matlab-R link (Windows only)</a></li><li><a href="#34">Calling Perl</a></li><li><a href="#36">Mex: Calling C, C++, Fortran</a></li><li><a href="#40">Mcc: Exporting Matlab Code to standalone code (requires compiler)</a></li><li><a href="#43">Emlmex: compiling to C for fixed memory functions (requires simulink)</a></li><li><a href="#54">Summary of Useful Functions</a></li></ul></div><h2>System Commands<a name="1"></a></h2><p>You can execute system commands from Matlab using the <i>system()</i> function or, equivalently, the ! operator.</p><pre class="codeinput"><span class="comment">%system('mspaint');                     % launch mspaint.exe</span>
<span class="comment">%!mspaint</span>
system(<span class="string">'echo hello world &gt; tmp.txt'</span>);  <span class="comment">% low level pipe to a file</span>
system(<span class="string">'type tmp.txt'</span>);                <span class="comment">% low level display of a file</span>
system(<span class="string">'del tmp.txt'</span>);                 <span class="comment">% delete the file</span>
</pre><pre class="codeoutput">hello world  
</pre><h2>Eval<a name="3"></a></h2><p>Often we do not know precisely which system commands to execute until run time. The <i>eval()</i> function can be very useful in these cases. Eval executes a string specified command as if it were typed at the command prompt or executed in a script or function.</p><p>Create 5 files tmp1.txt through tmp5.txt using low level system commands</p><pre class="codeinput"><span class="keyword">for</span> i=1:5
   cmd = sprintf(<span class="string">'!echo ''%s'' &gt; %s'</span>,  sprintf(<span class="string">'this is filenum %d'</span>, i), sprintf(<span class="string">'tmp%d.txt'</span>, i))
   eval(cmd)
<span class="keyword">end</span>
<span class="comment">% Now look at the contents of the first file</span>
type <span class="string">tmp1.txt</span>
</pre><pre class="codeoutput">cmd =
!echo 'this is filenum 1' &gt; tmp1.txt
cmd =
!echo 'this is filenum 2' &gt; tmp2.txt
cmd =
!echo 'this is filenum 3' &gt; tmp3.txt
cmd =
!echo 'this is filenum 4' &gt; tmp4.txt
cmd =
!echo 'this is filenum 5' &gt; tmp5.txt

'this is filenum 1' 

</pre><p>While extremely powerful, eval should only be used when other options have been exhausted as it can result in code that is very difficult to debug. If you want to dynamically determine which <i>function</i> to execute as your program runs, it is much better to pass around <a href="writingFunctions.html#funHandles">function handles</a>.</p><h2>Calling Java<a name="7"></a></h2><p>It is possible to call Java directly from Matlab. To create an object of a java class, you simply need to call the constructor. You must use the fully qualified name, even for classes under java.lang, unless you first import the name space with the <i>import()</i> function, as in this example.</p><pre class="codeinput">S = java.lang.String(<span class="string">'hello'</span>)
import <span class="string">java.lang.*</span>;       <span class="comment">% import the java.lang namespace</span>
S = String(<span class="string">'hello'</span>)       <span class="comment">% Create a java String object</span>
A = S.substring(0,2)      <span class="comment">% Call a method from the java.lang.String class</span>
</pre><pre class="codeoutput">S =
hello
S =
hello
A =
he
</pre><p>Recall, that java indexes from 0, not 1 as in Matlab</p><pre class="codeinput">I = Integer(3);            <span class="comment">% Create a java.lang.Integer object</span>
</pre><p>When the type returned by a java method is either of type java.lang.Object or a java primitive type, such as int, double, char, boolean, etc, Matlab automatically converts to a Matlab type for you. Similarly, you can pass Matlab data directly to java methods or constructors and Matlab will usually convert the data in a 'reasonable' way as we saw above. If you want to explicitly convert from a java type to a Matlab type, use the <i>char()</i> , <i>double()</i> , <i>cell()</i> , or <i>struct()</i> functions. To use <i>char()</i> , the java class must have an <b>obj.toChar()</b> method and to use <i>double()</i> ,it must have an <b>obj.toDouble()</b> method.</p><pre class="codeinput">B = char(A)               <span class="comment">% convert to a Matlab char array</span>
C = double(I)             <span class="comment">% convert to a Matlab double</span>
</pre><pre class="codeoutput">B =
he
C =
     3
</pre><p>Java objects can be stored in arrays, cell arrays and structs. When you concatenate two java objects, the type of the resulting matrix is the lowest common superclass.</p><pre class="codeinput">D = [A,I]
</pre><pre class="codeoutput">D =
java.lang.Object[]:
    'he'
    [3]

</pre><p>You can of course, pass java objects to the methods of other java objects.</p><pre class="codeinput">H = java.util.HashMap();
H.put(S,I);
H.get(S)
</pre><pre class="codeoutput">ans =
     3
</pre><p>Use the <i>javaArray()</i> function to create a java array. Suppose we wanted a 2D array of Strings as would be created by the java code, String[][] myArray = new String[4][5];</p><pre class="codeinput">JA = javaArray(<span class="string">'java.lang.String'</span>,4,5)      <span class="comment">% Create a java array of Strings</span>
</pre><pre class="codeoutput">JA =
 
java.lang.String[][]:
    []    []    []    []    []
    []    []    []    []    []
    []    []    []    []    []
    []    []    []    []    []

</pre><p>You must specify the fully qualified name here, even if you have imported the name space.</p><p>While Java indexes from 0, when using Matlab syntax as in the following command, Matlab automatically converts for you and indexing is once again from 1.</p><pre class="codeinput">JA(3,2) = String(<span class="string">'hello'</span>)
K = char(JA(3,2))
</pre><pre class="codeoutput">JA =
 
java.lang.String[][]:
    []         []    []    []    []
    []         []    []    []    []
    []    'hello'    []    []    []
    []         []    []    []    []

K =
hello
</pre><p>The <i>methods()</i> and <i>methodsview()</i> functions can be useful for viewing the public methods of a java object's class.</p><pre class="codeinput">methods(JA)
</pre><pre class="codeoutput">
Methods for class java.lang.String[][]:

equals     hashCode   notifyAll  wait       
getClass   notify     toString   

</pre><p>Static methods can be used as well</p><pre class="codeinput">Math.random()
</pre><pre class="codeoutput">ans =
    0.6656
</pre><p>To create objects of java classes, the classes must be on the Matlab java class path. Matlab uses both a static and dynamic path. The static path is loaded when Matlab is started and is defined in the <b>classpath.txt</b> file. To include classes you have written to the static path, edit this file, add the directory name containing your .class files at the bottom, and restart Matlab. They will then be available every time you load Matlab. Classes added to the dynamic path are available right away without having to restart Matlab, but are cleared when Matlab is closed. Also, using classes loaded dynamically is slightly less efficient. To add a directory to the dynamic path use the <i>javaaddpath()</i> function.</p><pre class="codeinput">javaaddpath(pwd);          <span class="comment">% add a directory to the dynamic path</span>
clear <span class="string">java</span>;                                             <span class="comment">% clear the dynamic path</span>
</pre><p>
<A NAME="javaHash"></a>
</p><h2>Java hash tables<a name="20"></a></h2><p>Hash Tables are very useful, and are supported in Java. One can call them easily from Matlab as illustarted in the following example.</p><pre class="codeinput">hTable = java.util.Hashtable;
hTable.put(0, rand(2,2));
hTable.put(1, 41.287);
hTable.put(2, <span class="string">'test string'</span>);
hTable.put(<span class="string">'foo'</span>, <span class="string">'bar'</span>);
hTable
hTable.get(<span class="string">'foo'</span>)
hTable.get(0)
</pre><pre class="codeoutput">hTable =
{2.0=test string, foo=bar, 1.0=41.287, 0.0=[[D@1b3846b}
ans =
bar
ans =
    0.3105    0.0267
    0.0539    0.2917
</pre><p>However, Matlab now (as of 2008b) has a <a href="dataStructures.html#Containers.map">containers.map</a> class, which does the same thing, without requiring you to call Java.</p><h2>Calling R<a name="22"></a></h2><p><a href="http://www.r-project.org/">R</a> is a programming environment and language similar to Matlab but containing somewhat different functionality, and with an emphasis on statistics rather than general numerical computing. Here we describe how to call R functions and obtain the results from within Matlab.</p><p>There are three approaches we can take to interface with R.</p><div><ol><li>Since we can execute system commands from Matlab and easily write   to files, we could take a file based approach to calling R.</li><li>We can bring up an R command prompt in Matlab by typing <b>! R --no-save</b>   at the command prompt - <b>q()</b> to quit - but we cannot transfer data this   way.</li><li>A better approach, in Windows at least, is to use the DCOM interface.</li></ol></div><h2>Calling R using the DCOM interface (Windows only)<a name="24"></a></h2><p>This is how you set it up.</p><div><ol><li>Install R version 2.62 or later from <a href="http://www.r-project.org/">http://www.r-project.org/</a></li><li>Add R.exe to the windows path.</li><li>Install the RCom Server available at <a href="http://lib.stat.cmu.edu/R/CRAN/contrib/extra/dcom/RSrv250.exe">http://lib.stat.cmu.edu/R/CRAN/contrib/extra/dcom/RSrv250.exe</a></li><li>Reboot Matlab</li></ol></div><p>You can add the R directory to your windows path for the duration of the Matlab session with the command below: alter the <b>2.6.2</b> accordingly. To add it permanently, add the directory to Control Panel -&gt; System -&gt; (Advanced System Settings) -&gt; Environment Variables -&gt; Path, or similar, depending on the version of Windows.</p><pre class="codeinput">setenv(<span class="string">'PATH'</span>,[getenv(<span class="string">'PATH'</span>) <span class="string">';C:\Program Files\R\R-2.6.2\bin'</span>]);
</pre><p>You can then use the COM interface as in this example</p><pre class="codeinput">Rcon = actxserver(<span class="string">'StatConnectorSrv.StatConnector'</span>)  <span class="comment">% setup connection</span>
Rcon.Init(<span class="string">'R'</span>);                                      <span class="comment">% open R</span>
Rcon.Evaluate(<span class="string">'A &lt;- 3'</span>);                             <span class="comment">% execute an R command, (in R memory space)</span>
A = Rcon.GetSymbol(<span class="string">'A'</span>)                              <span class="comment">% import R data into Matlab</span>
B = [1,2,3];                                         <span class="comment">% some Matlab data</span>
Rcon.SetSymbol(<span class="string">'B'</span>,B);                               <span class="comment">% export Matlab data to R</span>
C = Rcon.Evaluate(<span class="string">'B &lt;- B +1'</span>)                       <span class="comment">% execute an R command, get returned data</span>
Rcon.Close;                                          <span class="comment">% close connection (remember to do this!)</span>
</pre><pre class="codeoutput">Error using ==&gt; actxserver at 91
Server creation failed. Invalid ProgID 'StatConnectorSrv.StatConnector'

Error in ==&gt; external at 163
Rcon = actxserver('StatConnectorSrv.StatConnector')  % setup connection
</pre><h2>Matlab-R link (Windows only)<a name="29"></a></h2><p>There is much simpler way to call Matlab. First install   <a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=5051&amp;objectType=FILE">this matlab package</a>. This provides the following m-files: openR, closeR, evalR, getRdata, putRdata. We give an example of use below.</p><p>The interface can be finicky and will return highly cryptic error messages when anything goes wrong. When exporting Matlab matrices to R for example, it is sometimes necessary to create the variable in R first, assigning it a dummy scalar value.</p><p>Here we demonstrate how to use the openR, closeR, evalR, getRdata, and putRdata files. We attempt to classify data using R's randomForest function. The R randomForest package must first be installed <b>in R</b> by going to packages -&gt; install Packages -&gt; (choose a server) -&gt; randomForest</p><pre class="codeinput">rand(<span class="string">'twister'</span>,1);                       <span class="comment">% seed rand num generator</span>
load <span class="string">fisherIris</span>                          <span class="comment">% builtin dataset</span>
[j,j,species] = unique(species);         <span class="comment">% convert to numeric class labels instead of strings</span>
ntrain  = 120;                           <span class="comment">% number of training cases to use</span>
ntest   = 30;                            <span class="comment">% number of test cases to use</span>
perm   = randperm(size(meas,1)        ); <span class="comment">% randomly divide data into training and test sets</span>
Xtrain = meas    (perm(1:ntrain    ),:);
Xtest  = meas    (perm(ntrain+1:end),:);
ytrain = species (perm(1:ntrain    ),:);
ytest  = species (perm(ntrain+1:end),:);
</pre><pre class="codeinput">openR;                                <span class="comment">% open the R connection</span>
evalR(<span class="string">'library(randomForest)'</span>);       <span class="comment">% load the already installed randomForest package</span>
putRdata(<span class="string">'Xtrain'</span>,Xtrain);            <span class="comment">% export the Matlab data to R</span>
evalR(<span class="string">'Xtrain &lt;- data.frame(Xtrain)'</span>) <span class="comment">% randomForest expects an R data frame, create it.</span>
putRdata(<span class="string">'ytrain'</span>,ytrain);            <span class="comment">% export to R</span>
evalR(<span class="string">'ytrain &lt;- data.frame(ytrain)'</span>);<span class="comment">% build frame</span>
putRdata(<span class="string">'Xtest'</span>,Xtest);              <span class="comment">% export to R</span>
evalR(<span class="string">'Xtest &lt;- data.frame(Xtest)'</span>);  <span class="comment">% build frame</span>
</pre><p>Here we call the actual randomForest function in R and ask the constructed forest to predict the class labels given the training data.</p><pre class="codeinput">evalR(<span class="string">'rf &lt;- randomForest(Xtrain[1:120,],ytrain[1:120,])'</span>);
evalR(<span class="string">'yhat &lt;- predict(rf,Xtest[1:30,])'</span>);
yhat = getRdata(<span class="string">'yhat'</span>);                     <span class="comment">% import the predictions into Matlab</span>
closeR;                                      <span class="comment">% close the R connection</span>
numWrong = sum(round(yhat') ~= ytest)        <span class="comment">% How many, out of 30, did it get wrong?</span>
</pre><p>Note, the R random forest function performed regression here not classification so we round the results to approximate the class labels.</p><h2>Calling Perl<a name="34"></a></h2><p>Perl scripts can be run using the <i>perl()</i> function.</p><pre class="codeinput">fid = fopen(<span class="string">'hello.pl'</span>,<span class="string">'w'</span>);
fprintf(fid,<span class="string">'$input = $ARGV[0];\nprint "Hello $input.";'</span>);
fclose(fid);
perl(<span class="string">'hello.pl'</span>,<span class="string">'World'</span>)
</pre><p>
<A NAME="mex"></A>
</p><h2>Mex: Calling C, C++, Fortran<a name="36"></a></h2><p>Matlab can be extremely fast if you are able to vectorize the code, but when you are faced with loops, executing many many times, Matlab code can be prohibitively slow. It is sometimes necessary, for the sake of speed, to write certain time intensive parts of a Matlab application in a low level language like C. Unfortunately, the process of interfacing with C, C++ and Fortran can be somewhat complicated. We explain here, how to write a simple C function and make it work in Matlab. For more detailed information consult the online documentation at <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/matlab.html">http://www.mathworks.com/access/helpdesk/help/techdoc/matlab.html</a></p><p>We use the <i>mex()</i> function to compile C code for use in Matlab but we must first add the required components to the C source file itself. We import the mex library, which gives us access to various error checking and matrix creation utilities in C.</p><div><ol><li>type <b>mex -setup</b> and follow the simple instructions to setup the compiler.</li><li>start writing your C function and include the line <b>#include "mex.h"</b></li><li>add a Matlab mex gateway function with the definition given below. This   function will be called when you execute the function from within Matlab.</li><li>perform any error checking in the gateway function, setup the output   parameters using say  the <i>mxCreateDoubleMatrix</i> function available from mex.h.   and call out to whatever function does the real work.</li><li>save the C file and make sure its on the Matlab path</li><li>type <b>mex filename.C</b> at the Matlab command prompt to compile the   function, creating, (in windows at least) a file called   filename.mexw32. The extension differs in different operating systems.</li><li>call the function as you would any other Matlab function.</li></ol></div><p>The gateway function must have the following definition:</p><p><b>void mexFunction(int nlhs, mxArray *plhs[],int nrhs, const mxArray*prhs[])</b></p><div><ul><li>nlhs is the number of output arguments</li><li>nrhs is the number of input arguments</li><li>plhs is a pointer array to mxArrays created using the <i>mxCreateDoubleMatrix</i> function</li><li>prhs is a pointer array of mxArrays passed from Matlab</li></ul></div><p>For an example, see <a href="mfiles/yprime.c">yprime.c</a>. For information on <i>mxCreateDoubleMatrix</i> and other related functions go to help -&gt; contents -&gt; Matlab -&gt; C and Fortran API Reference</p><p>
<A NAME="mcc"></A>
</p><h2>Mcc: Exporting Matlab Code to standalone code (requires compiler)<a name="40"></a></h2><p>Matlab code can be exported as a stand-alone application or as a shared library for use in Excel, java, C, C++, or .NET applications. The standalone code needs the free Matlab Compile Runtime (MCR) environment. Thus, code that you write in Matlab can be distributed and used by users who do not have Matlab installed, or used inside of larger applications. Furthermore, deployed code is encrypted and thus protected should you not wish to make it open-source.</p><p>To create standalone code, you can either type <b>mcc</b> or launch the GUI by typing <b>deploytool</b>. Note that both of these methods require you buy the <a href="http://www.mathworks.com/access/helpdesk/help/toolbox/compiler">matlab compiler</a>.</p><p>
<A NAME="emlmex"></A>
</p><h2>Emlmex: compiling to C for fixed memory functions (requires simulink)<a name="43"></a></h2><p>In a certain restricted set of cases, we can compile Matlab m-code to C, for use within Matlab, improving speed. The compiler function is <i>emlmex()</i> and as above, it creates a mexw32 file. As long as this file is on the path, it shadows the original m-code function and is called in its place. The compiler is designed to produce embedded code and compiles functions that do not require any dynamic memory. Such code is extremely fast but requires that the type and size of all of the variables be pre-declared at compile time. This is quite a strong precondition; when it cannot be met, consider the previous approach, or try compiling in 'real time' as described below. The mex compiler must be first setup by following step one of the previous section.</p><p>Note that <i>emlmex()</i> is only available if you have either the simulink or fixed-point toolboxes installed.</p><p><i>emlmex()</i> currently does not support: cell arrays, objects, sparse matrices, try/catch blocks, nested functions, matrix element deletion, variables that change size or type, and java.</p><p>You must include the following comment as the first line below the function header: <b>%#eml</b>. This  affects the warning messages displayed in the editor.</p><p>Matlab is usually able to automatically infer the type and size of variables used. Sometimes, however, the <i>assert()</i> function must be used.</p><pre class="codeinput">m = ones(3,3);                      <span class="comment">% suppose this data is passed to the function.</span>
assert(isa(m,<span class="string">'double'</span>));            <span class="comment">% declare the type</span>
assert(all (size(m) == [3 3]));     <span class="comment">% declare the size</span>
</pre><p>Alternatively, the size and type of the input variables can be specified at compile time using the -eg switch. Below we compile <a href="mfiles/LassoShootingFast.m">LassoShootingFast</a>, which is a coordinate ascent method for solving L1 regularized least squares, using the following sized of inputs</p><div><ul><li>X is 1000-by-16,</li><li>y is 1000-by-1,</li><li>lambda is 1-by-1,</li><li>w0 is 16-by-1.</li></ul></div><pre class="codeinput"><span class="comment">%emlmex('LassoShootingFast','-eg','{zeros(1000,16),zeros(1000,1),0,zeros(16,1)}');</span>
</pre><p>We could also parameterize the dimensions as follows:</p><pre class="codeinput"><span class="comment">%n = 1000; d = 16;</span>
<span class="comment">%emlmex('LassoShootingFast','-eg',[' {zeros(',num2str(n),',',num2str(d),'),zeros(',num2str(n),',1),0,zeros(',num2str(d),',1)}']);</span>
</pre><p>We can call the compiler using the above syntax within another parent function and have it determine the size of the inputs as it runs, before it compiles the subfunction. This gives us the flexibility of determining the input sizes at run time but the speed of a compiled subfunction. Matt Dunham wrote two functions to make this easier: <a href="mfiles/compileAndRun.m">compileAndRun</a>, which compiles the function, calls it, then deletes it; and <a href="mfiles/compileRunAndSave.m">compileRunAndSave</a>, which compiles the function (for a specific sized input), and saves it.</p><p>However, compilation can take a few seconds and so you must be sure that the gain obtained from compilation outweighs the overhead. Use the <i>tic()</i> and <i>toc()</i> functions to time your code both ways and compare. Moreover, compilation is only likely to speed up a function if it contains loops and executes a sufficiently large, (i.e. time consuming) chunk of code. It will not reduce the asymptotic running time of your algorithm and writing emlmex complaint code can be a tedious process; be sure its both possible and worth the effort before you begin. In the case of LassoShootingFast, however, compiling the function did result in code that was about 10 to 100 times faster.</p><p>If the m-file to be compiled calls additional functions, <i>emlmex()</i> tries to compile these as well unless they are first declared extrinsic with the command <b>eml.extrinsic('myFunction')</b></p><h2>Summary of Useful Functions<a name="54"></a></h2><div><ul><li>system, eval</li><li>import, char, double, cell, struct, javaArray, methods, methodsView</li><li>javaAddPath, setenv, getenv,</li><li>actxserver, openR, closeR, evalR, getRdata, putRdata</li><li>mex, emlmex, assert, eml.extrinsic</li><li>perl</li></ul></div><p class="footer"><br>
      Published with MATLAB&reg; 7.10<br></p></div><!--
##### SOURCE BEGIN #####
%% Compiling and calling other languages
% Matlab is an extremely powerful programming environment, but
% it can still be useful to call other languages for various
% reasons, such as speed (C) or existence of pre-canned packages (R) or
% data structures (Java). In this chapter, we show how to do this.


%% System Commands 
% You can execute system commands from Matlab using the _system()_ function
% or, equivalently, the ! operator. 
%%
%system('mspaint');                     % launch mspaint.exe
%!mspaint
system('echo hello world > tmp.txt');  % low level pipe to a file
system('type tmp.txt');                % low level display of a file
system('del tmp.txt');                 % delete the file
%% Eval
% Often we do not know precisely which system commands to execute until
% run time. The _eval()_ function can be very useful in these cases. Eval
% executes a string specified command as if it were typed at the command
% prompt or executed in a script or function.
%%
% Create 5 files tmp1.txt through tmp5.txt using low level system commands
for i=1:5
   cmd = sprintf('!echo ''%s'' > %s',  sprintf('this is filenum %d', i), sprintf('tmp%d.txt', i))
   eval(cmd)
end
% Now look at the contents of the first file
type tmp1.txt
%%
% While extremely powerful, eval should only be used when other options have
% been exhausted as it can result in code that is very difficult to debug.
% If you want to dynamically determine which _function_ to execute as your
% program runs, it is much better to pass around
% <writingFunctions.html#funHandles function handles>.
%%

%% Calling Java
% It is possible to call Java directly from Matlab.
% To create an object of a java class, you simply need to call the
% constructor. You must use the fully qualified name, even for classes
% under java.lang, unless you first import the name space with the
% _import()_ function, as in this example.
S = java.lang.String('hello')
import java.lang.*;       % import the java.lang namespace
S = String('hello')       % Create a java String object
A = S.substring(0,2)      % Call a method from the java.lang.String class
%%
% Recall, that java indexes from 0, not 1 as in Matlab
%%
I = Integer(3);            % Create a java.lang.Integer object
%%
% When the type returned by a java method is either of type
% java.lang.Object or a java primitive type, such as int, double, char,
% boolean, etc, Matlab automatically converts to a Matlab type for you.
% Similarly, you can pass Matlab data directly to java methods or
% constructors and Matlab will usually convert the data in a 'reasonable'
% way as we saw above. If you want to explicitly convert from a java type
% to a Matlab type, use the _char()_ , _double()_ , _cell()_ , or
% _struct()_ functions. To use _char()_ , the java class must have an
% *obj.toChar()* method and to use _double()_ ,it must have an
% *obj.toDouble()* method.
B = char(A)               % convert to a Matlab char array
C = double(I)             % convert to a Matlab double
%% 
% Java objects can be stored in arrays, cell arrays and structs. When you
% concatenate two java objects, the type of the resulting matrix is the
% lowest common superclass. 
D = [A,I]
%% 
% You can of course, pass java objects to the methods of other java
% objects.
H = java.util.HashMap();
H.put(S,I);
H.get(S)
%%
% Use the _javaArray()_ function to create a java array. Suppose we
% wanted a 2D array of Strings as would be created by the java code,
% String[][] myArray = new String[4][5];
JA = javaArray('java.lang.String',4,5)      % Create a java array of Strings 
%%
% You must specify the fully qualified name here, even if you have imported the
% name space. 
%%
% While Java indexes from 0, when using Matlab syntax as in the following
% command, Matlab automatically converts for you and indexing is once again
% from 1.
JA(3,2) = String('hello') 
K = char(JA(3,2))
%% 
% The _methods()_ and _methodsview()_ functions can be useful for viewing
% the public methods of a java object's class. 
methods(JA)
%%
% Static methods can be used as well
Math.random()
%%
% To create objects of java classes, the classes must be on the Matlab java
% class path. Matlab uses both a static and dynamic path. The static path
% is loaded when Matlab is started and is defined in the *classpath.txt*
% file. To include classes you have written to the static path, edit this
% file, add the directory name containing your .class files at the bottom, 
% and restart Matlab. They will then be available every time you load
% Matlab. Classes added to the dynamic path are available right away
% without having to restart Matlab, but are cleared when Matlab is closed.
% Also, using classes loaded dynamically is slightly less efficient. To add
% a directory to the dynamic path use the _javaaddpath()_ function.
javaaddpath(pwd);          % add a directory to the dynamic path
clear java;                                             % clear the dynamic path
%%
% <html> 
% <A NAME="javaHash"></a>
% </html>
%% Java hash tables
% Hash Tables are very useful, and are supported in Java. One can call them easily from Matlab
% as illustarted in the following example.
hTable = java.util.Hashtable;
hTable.put(0, rand(2,2));
hTable.put(1, 41.287);
hTable.put(2, 'test string');
hTable.put('foo', 'bar');
hTable
hTable.get('foo')
hTable.get(0)
%%
% However, Matlab now (as of 2008b) has a 
% <dataStructures.html#Containers.map containers.map> class, which
% does the same thing, without requiring you to call Java.
%
%% Calling R
% <http://www.r-project.org/ R> is a programming environment and language similar to 
% Matlab but containing 
% somewhat different functionality, and with an emphasis on statistics
% rather than general numerical computing. Here we
% describe how to call R functions and obtain the results from within
% Matlab. 
%%
% There are three approaches we can take to interface with R.  
%
% # Since we can execute system commands from Matlab and easily write
%   to files, we could take a file based approach to calling R.
% # We can bring up an R command prompt in Matlab by typing *! R REPLACE_WITH_DASH_DASHno-save* 
%   at the command prompt - *q()* to quit - but we cannot transfer data this
%   way.
% # A better approach, in Windows at least, is to use the DCOM interface.
%% Calling R using the DCOM interface (Windows only)
% This is how you set it up.
%%
% # Install R version 2.62 or later from <http://www.r-project.org/>
% # Add R.exe to the windows path. 
% # Install the RCom Server available at
% <http://lib.stat.cmu.edu/R/CRAN/contrib/extra/dcom/RSrv250.exe>
% # Reboot Matlab
%%
% You can add the R directory to your windows path for the duration of the
% Matlab session with the command below: alter the *2.6.2* accordingly.
% To add it permanently, add the directory to Control Panel ->
% System -> (Advanced System Settings) -> Environment Variables -> Path, or
% similar, depending on the version of Windows. 
setenv('PATH',[getenv('PATH') ';C:\Program Files\R\R-2.6.2\bin']);
%%
% You can then use the COM interface as in this example
Rcon = actxserver('StatConnectorSrv.StatConnector')  % setup connection
Rcon.Init('R');                                      % open R
Rcon.Evaluate('A <- 3');                             % execute an R command, (in R memory space)
A = Rcon.GetSymbol('A')                              % import R data into Matlab
B = [1,2,3];                                         % some Matlab data
Rcon.SetSymbol('B',B);                               % export Matlab data to R
C = Rcon.Evaluate('B <- B +1')                       % execute an R command, get returned data
Rcon.Close;                                          % close connection (remember to do this!)
%% 
%% Matlab-R link (Windows only)
% There is much simpler way to call Matlab. First install
%   <http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=5051&objectType=FILE this matlab package>.
% This provides the following m-files:
% openR, closeR, evalR, getRdata, putRdata.
% We give an example of use below.
%
% The interface can be finicky and will return highly cryptic error
% messages when anything goes wrong. When exporting Matlab matrices to R
% for example, it is sometimes necessary to create the variable in R first, 
% assigning it a dummy scalar value. 
%
% Here we demonstrate how to use the openR, closeR, evalR, getRdata, and
% putRdata files. We attempt to classify data using R's randomForest
% function. The R randomForest package must first be installed *in R* by going
% to packages -> install Packages -> (choose a server) -> randomForest
%%
rand('twister',1);                       % seed rand num generator
load fisherIris                          % builtin dataset
[j,j,species] = unique(species);         % convert to numeric class labels instead of strings
ntrain  = 120;                           % number of training cases to use
ntest   = 30;                            % number of test cases to use
perm   = randperm(size(meas,1)        ); % randomly divide data into training and test sets
Xtrain = meas    (perm(1:ntrain    ),:); 
Xtest  = meas    (perm(ntrain+1:end),:);
ytrain = species (perm(1:ntrain    ),:);
ytest  = species (perm(ntrain+1:end),:);
%%
openR;                                % open the R connection
evalR('library(randomForest)');       % load the already installed randomForest package
putRdata('Xtrain',Xtrain);            % export the Matlab data to R
evalR('Xtrain <- data.frame(Xtrain)') % randomForest expects an R data frame, create it.
putRdata('ytrain',ytrain);            % export to R
evalR('ytrain <- data.frame(ytrain)');% build frame
putRdata('Xtest',Xtest);              % export to R
evalR('Xtest <- data.frame(Xtest)');  % build frame
%%
% Here we call the actual randomForest function in R and ask the
% constructed forest to predict the class labels given the training data.
evalR('rf <- randomForest(Xtrain[1:120,],ytrain[1:120,])');
evalR('yhat <- predict(rf,Xtest[1:30,])');
yhat = getRdata('yhat');                     % import the predictions into Matlab
closeR;                                      % close the R connection
numWrong = sum(round(yhat') ~= ytest)        % How many, out of 30, did it get wrong?
%%
% Note, the R random forest function performed regression here not
% classification so we round the results to approximate the class labels. 
%% Calling Perl
% Perl scripts can be run using the _perl()_ function. 
fid = fopen('hello.pl','w');
fprintf(fid,'$input = $ARGV[0];\nprint "Hello $input.";');
fclose(fid);
perl('hello.pl','World')
%%
% <html> 
% <A NAME="mex"></A>
% </html>
%% Mex: Calling C, C++, Fortran
% Matlab can be extremely fast if you are able to vectorize the code, but
% when you are faced with loops, executing many many times, Matlab code can be
% prohibitively slow. It is sometimes necessary, for the sake of speed, to
% write certain time intensive parts of a Matlab application in a low level
% language like C. Unfortunately, the process of interfacing with C, C++
% and Fortran can be somewhat complicated. We explain here, how to write a
% simple C function and make it work in Matlab. For more detailed
% information consult the online documentation at 
% <http://www.mathworks.com/access/helpdesk/help/techdoc/matlab.html>
%%
% We use the _mex()_ function to compile C code for use in Matlab
% but we must first add the required components to the C source file
% itself. We import the mex library, which gives us access to various error 
% checking and matrix creation utilities in C.
% 
% # type *mex -setup* and follow the simple instructions to setup the compiler.
% # start writing your C function and include the line *#include "mex.h"*
% # add a Matlab mex gateway function with the definition given below. This
%   function will be called when you execute the function from within Matlab.
% # perform any error checking in the gateway function, setup the output
%   parameters using say  the _mxCreateDoubleMatrix_ function available from mex.h. 
%   and call out to whatever function does the real work. 
% # save the C file and make sure its on the Matlab path
% # type *mex filename.C* at the Matlab command prompt to compile the
%   function, creating, (in windows at least) a file called
%   filename.mexw32. The extension differs in different operating systems.
% # call the function as you would any other Matlab function.
%
%%
% The gateway function must have the following definition:
%
% *void mexFunction(int nlhs, mxArray *plhs[],int nrhs, const mxArray*prhs[])*
%
% * nlhs is the number of output arguments 
% * nrhs is the number of input arguments
% * plhs is a pointer array to mxArrays created using the _mxCreateDoubleMatrix_ function
% * prhs is a pointer array of mxArrays passed from Matlab
%%
% For an example, see
% <mfiles/yprime.c yprime.c>.
% For information on _mxCreateDoubleMatrix_ and other related functions go
% to help -> contents -> Matlab -> C and Fortran API Reference
%
% <html> 
% <A NAME="mcc"></A>
% </html>
%% Mcc: Exporting Matlab Code to standalone code (requires compiler)
% Matlab code can be exported as a stand-alone application or as a shared
% library for use in Excel, java, C, C++, or .NET applications.
% The standalone code needs the free Matlab Compile Runtime (MCR)
% environment.
% Thus, code that you write in Matlab can be distributed and used by users
% who do not have Matlab installed, or used inside of larger applications.
% Furthermore, deployed code is encrypted and thus protected should you not
% wish to make it open-source.
%
%% 
% To create standalone code,
% you can either type *mcc* or launch the GUI by typing *deploytool*.
% Note that both of these methods
% require you buy
% the
% <http://www.mathworks.com/access/helpdesk/help/toolbox/compiler matlab
% compiler>.
%%
% <html> 
% <A NAME="emlmex"></A>
% </html>
%% Emlmex: compiling to C for fixed memory functions (requires simulink)
% In a certain restricted set of cases, we can compile Matlab m-code to C,
% for use within Matlab, improving speed. The compiler function is
% _emlmex()_ and as above, it creates a mexw32 file. As long as this file
% is on the path, it shadows the original m-code function and is called in
% its place. The compiler is designed to produce embedded code and compiles
% functions that do not require any dynamic memory. Such code is extremely
% fast but requires that the type and size of all of the variables be
% pre-declared at compile time. This is quite a strong precondition; when
% it cannot be met, consider the previous approach, or try compiling in 
% 'real time' as described below. The mex compiler must be first setup by
% following step one of the previous section.
%%
% Note that _emlmex()_ is only available if you have either the simulink or
% fixed-point toolboxes installed. 
%%
% _emlmex()_ currently does not support: cell arrays, objects, sparse matrices,
% try/catch blocks, nested functions, matrix element deletion, variables
% that change size or type, and java.
%%
% You must include the following comment as the first line below the
% function header: *%#eml*. This  affects the warning messages
% displayed in the editor.
%%
% Matlab is usually able to automatically infer the type and size of
% variables used. Sometimes, however, the _assert()_ function must
% be used. 
m = ones(3,3);                      % suppose this data is passed to the function.
assert(isa(m,'double'));            % declare the type
assert(all (size(m) == [3 3]));     % declare the size
%%
% Alternatively, the size and type of the input variables can be specified at
% compile time using the -eg switch. Below we compile
% <mfiles/LassoShootingFast.m LassoShootingFast>,
% which is a coordinate ascent method for solving
% L1 regularized least squares,
% using the following sized of inputs
% 
% * X is 1000-by-16,
% * y is 1000-by-1,
% * lambda is 1-by-1,
% * w0 is 16-by-1. 
%%
%emlmex('LassoShootingFast','-eg','{zeros(1000,16),zeros(1000,1),0,zeros(16,1)}');
%%
% We could also parameterize the dimensions as follows:
%n = 1000; d = 16;
%emlmex('LassoShootingFast','-eg',[' {zeros(',num2str(n),',',num2str(d),'),zeros(',num2str(n),',1),0,zeros(',num2str(d),',1)}']);
%%
% We can call the compiler using the above syntax within another
% parent function and have it determine the size of the inputs as it runs,
% before it compiles the subfunction. This gives us the flexibility of
% determining the input sizes at run time but the speed of a compiled
% subfunction.
% Matt Dunham wrote two functions to make this easier:
% <mfiles/compileAndRun.m compileAndRun>,
% which compiles the function, calls it, then deletes it;
% and
% <mfiles/compileRunAndSave.m compileRunAndSave>,
% which compiles the function (for a specific sized input),
% and saves it.
%%
% However, compilation can take a few seconds and so you must
% be sure that the gain obtained from compilation outweighs the overhead.
% Use the _tic()_ and _toc()_ functions to time your code both ways and
% compare. 
% Moreover, compilation is only likely to speed up a function if it
% contains loops and executes a sufficiently large, (i.e. time consuming)
% chunk of code. It will not reduce the asymptotic running time of
% your algorithm and writing emlmex complaint code can be a tedious
% process; be sure its both possible and worth the effort before you begin.
% In the case of LassoShootingFast, however, compiling the function did
% result in code that was about 10 to 100 times faster.  
%%
% If the m-file to be compiled calls additional functions, _emlmex()_ tries
% to compile these as well unless they are first declared extrinsic with
% the command
% *eml.extrinsic('myFunction')*
%% Summary of Useful Functions
% * system, eval
% * import, char, double, cell, struct, javaArray, methods, methodsView
% * javaAddPath, setenv, getenv, 
% * actxserver, openR, closeR, evalR, getRdata, putRdata
% * mex, emlmex, assert, eml.extrinsic
% * perl


##### SOURCE END #####
--></body></html>