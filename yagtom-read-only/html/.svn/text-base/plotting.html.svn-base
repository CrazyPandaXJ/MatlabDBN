
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <!--
This HTML is auto-generated from an M-file.
To make changes, update the M-file and republish this document.
      --><title>Plotting</title><meta name="generator" content="MATLAB 7.10"><meta name="date" content="2010-07-16"><meta name="m-file" content="plotting"><style type="text/css">

body {
  background-color: white;
  margin:10px;
}

h1 {
  color: #990000; 
  font-size: x-large;
}

h2 {
  color: #990000;
  font-size: medium;
}

/* Make the text shrink to fit narrow windows, but not stretch too far in 
wide windows. */ 
p,h1,h2,div.content div {
  max-width: 600px;
  /* Hack for IE6 */
  width: auto !important; width: 600px;
}

pre.codeinput {
  background: #EEEEEE;
  padding: 10px;
}
@media print {
  pre.codeinput {word-wrap:break-word; width:100%;}
} 

span.keyword {color: #0000FF}
span.comment {color: #228B22}
span.string {color: #A020F0}
span.untermstring {color: #B20000}
span.syscmd {color: #B28C00}

pre.codeoutput {
  color: #666666;
  padding: 10px;
}

pre.error {
  color: red;
}

p.footer {
  text-align: right;
  font-size: xx-small;
  font-weight: lighter;
  font-style: italic;
  color: gray;
}

  </style></head><body><div class="content"><h1>Plotting</h1><!--introduction--><p>Matlab has excellent support for data visualization and graphics with over 70 types of plots currently available. We won't be able to go into all of them here, nor will we need to, as they all operate in very similar ways. In fact, by understanding how Matlab plotting works in general, we'll be able to see most plot types as simple variations of each other. Fundamentally, they all use the same basic constructs. Rather than explain all this in detail, we will just give some useful examples; it should be pretty clear what is going on from context.</p><!--/introduction--><h2>Contents</h2><div><ul><li><a href="#1">Scatter plots for 2D Data</a></li><li><a href="#3">Title and axis labels</a></li><li><a href="#4">Plotting  curves</a></li><li><a href="#6">Subplots</a></li><li><a href="#8">Handles and Customization</a></li><li><a href="#20">Tickmarks</a></li><li><a href="#23">Histograms</a></li><li><a href="#26">Plotting 1d probability density functions</a></li><li><a href="#27">Plotting images</a></li><li><a href="#29">Heatmaps and Hinton diagrams</a></li><li><a href="#32">Saving and Printing</a></li><li><a href="#39">PlaceFigures</a></li></ul></div><h2>Scatter plots for 2D Data<a name="1"></a></h2><p>Here we show how to plot some random 2d data.</p><pre class="codeinput">rand(<span class="string">'twister'</span>,0);                               <span class="comment">% seed the random number generator</span>
X = 5*rand(100,1);  y = rand*X + rand(100,1);    <span class="comment">% generate some synthetic data</span>
f1 = figure;                                     <span class="comment">% create a blank figure</span>
p1 = plot(X,y,<span class="string">'.'</span>);                              <span class="comment">% plot X vs y</span>
X1 = X;
</pre><img vspace="5" hspace="5" src="plotting_01.png" alt=""> <p>We have told Matlab to plot the data in X vs the data in y and to display a blue solid dot for each data point. There are many different types of marker and line styles available. For a complete list type <b>doc linespec</b>. Lets make a few changes.</p><pre class="codeinput">clf(f1);                                         <span class="comment">% clear the figure</span>
p2 = plot(X,y,<span class="string">'o'</span>,<span class="string">'MarkerEdgeColor'</span>,<span class="string">'k'</span>,<span class="keyword">...</span><span class="comment">      % plot larger red circles with black edges</span>
                  <span class="string">'MarkerFaceColor'</span>,<span class="string">'r'</span>,<span class="keyword">...</span>
                  <span class="string">'MarkerSize'</span>,8);
</pre><img vspace="5" hspace="5" src="plotting_02.png" alt=""> <h2>Title and axis labels<a name="3"></a></h2><p>We can specify the axis range and labels as follows.</p><pre class="codeinput">axis([-1,6,-1,5]);
xlabel(<span class="string">'x'</span>); ylabel(<span class="string">'y'</span>);title(<span class="string">'this is the title'</span>);
</pre><img vspace="5" hspace="5" src="plotting_03.png" alt=""> <h2>Plotting  curves<a name="4"></a></h2><p>Plotting functions (curves) is very similar to the data plotting we just performed. We evaluate the function at every point along its domain and plot the resulting x,y pairs, connecting consecutive dots. Here we plot two functions on the same set of axes. The <b>hold on</b> command tells Matlab to superimpose all the plots onto the same figure, rather than overwriting previous plots.</p><pre class="codeinput">f = @(x) x.^2;                  <span class="comment">% create a function of x, namely f(x) = x.^2</span>
g = @(x) 5*sin(x)+5;            <span class="comment">% create a second function of x, g(x) = 5*sin(x) + 5</span>
res = 0.001;                    <span class="comment">% resolution of the plot</span>
domain = -pi:res:pi;            <span class="comment">% the domain of x, (i.e. points at which to evaluate f,g)</span>
f2 = figure;                    <span class="comment">% open a new figure</span>
p3 = plot(domain,f(domain));    <span class="comment">% plot f, w.r.t. x over its domain</span>
hold <span class="string">on</span>;                        <span class="comment">% tell Matlab to add future plots to the same set of axes</span>
p4 = plot(domain,g(domain));    <span class="comment">% plot the second function.</span>
</pre><img vspace="5" hspace="5" src="plotting_04.png" alt=""> <p>Not bad for a first attempt but there are a lot of improvements we could make. Lets try again but this time, we will plot each function in its own color, change the line widths and types, the tick marks, the range of the axes, the background color, the font size, and add labels, a title, and a legend. We'll keep the functions and domain the same. Let us also add error bars to one of the functions denoting one standard deviation of the dependent variable.</p><pre class="codeinput">f3 = figure(<span class="string">'Color'</span>,[1,1,1]); hold <span class="string">on</span>;             <span class="comment">% new figure with a white background</span>
p5 = plot(domain,f(domain),<span class="string">'--r'</span>,<span class="string">'LineWidth'</span>,3);   <span class="comment">% plot a thick dashed red line</span>
p6 = plot(domain,g(domain),<span class="string">'-b'</span>,<span class="string">'LineWidth'</span>,3);    <span class="comment">% plot a thick solid blue line</span>
subdomain = domain(1:400:end);                     <span class="comment">% we will plot error bars at every 400th point</span>
oneSTD = std(g(domain));                           <span class="comment">% standard deviation of g(domain)</span>
oneSTD = oneSTD*ones(size(subdomain));             <span class="comment">% make correct size, as needed by errorbar</span>
p7 = errorbar(subdomain,g(subdomain),oneSTD);      <span class="comment">% plot the error bars</span>
title(<span class="string">'example figure'</span>,<span class="string">'FontSize'</span>,12);             <span class="comment">% add a title</span>
xlabel(<span class="string">'distance'</span>,<span class="string">'FontSize'</span>,12);                  <span class="comment">% label the horizontal axis</span>
ylabel(<span class="string">'height'</span>,<span class="string">'FontSize'</span>,12);                    <span class="comment">% label the vertical axis</span>
axis([-3,3,-5,15]);                                <span class="comment">% set the axis range</span>
grid <span class="string">on</span>;                                           <span class="comment">% add grid lines</span>
legend(<span class="string">'f'</span>, <span class="string">'g'</span>);
</pre><img vspace="5" hspace="5" src="plotting_05.png" alt=""> <h2>Subplots<a name="6"></a></h2><p>We often want to plot multiple subfigures within a larger one. We can write <b>subplot(nr,nc,i)</b> to make an nr * nc plot. This command selects the i'th such subplot, numbered from left to right, top to bottom. Kevin Murphy's <a href="mfiles/graphics/subplot2.m">subplot2</a> function is sometime more convenient: you write <b>subplot2(nr,nc,i,j)</b> to select the subplot in row i, column j. Drea Thomas' <a href="mfiles/graphics/suptitle.m">suptitle</a> function can be used to provide a title for all the plots. Below we give an example.</p><pre class="codeinput">figure;
<span class="keyword">for</span> i=1:6
  subplot(2,3,i);
  hist(rand(1,100),10);
  title(sprintf(<span class="string">'subplot %d'</span>, i));
<span class="keyword">end</span>
suptitle(<span class="string">'master title'</span>)
</pre><img vspace="5" hspace="5" src="plotting_06.png" alt=""> <h2>Handles and Customization<a name="8"></a></h2><p>Figure generation in Matlab is object oriented. Figures are top level objects and contain other objects such as axes and annotations. Axes further contain sub-objects such as plots and labels, which are often built up from smaller objects too. All of these objects have attributes that can be retrieved and, (for the most part) changed, using the <i>get()</i> and <i>set()</i> commands. The first parameter to these functions is a handle to an object. We can obtain such handles when we create the objects as in <i>fig = figure</i>.</p><p>After the fact, we can obtain the handle to the current figure by using the <i>gcf()</i> command or to the current set of axes by using the <i>gca()</i> command.  We can see a list of all of the attributes of an object by typing <b>get(handle)</b> at the command prompt.</p><pre class="codeinput">figure(f3);
get(gca)
</pre><pre class="codeoutput">	ActivePositionProperty = outerposition
	ALim = [0 1]
	ALimMode = auto
	AmbientLightColor = [1 1 1]
	Box = off
	CameraPosition = [0 5 17.3205]
	CameraPositionMode = auto
	CameraTarget = [0 5 0]
	CameraTargetMode = auto
	CameraUpVector = [0 1 0]
	CameraUpVectorMode = auto
	CameraViewAngle = [6.60861]
	CameraViewAngleMode = auto
	CLim = [0 1]
	CLimMode = auto
	Color = [1 1 1]
	CurrentPoint = [ (2 by 3) double array]
	ColorOrder = [ (7 by 3) double array]
	DataAspectRatio = [3 10 1]
	DataAspectRatioMode = auto
	DrawMode = normal
	FontAngle = normal
	FontName = Helvetica
	FontSize = [10]
	FontUnits = points
	FontWeight = normal
	GridLineStyle = :
	Layer = bottom
	LineStyleOrder = -
	LineWidth = [0.5]
	MinorGridLineStyle = :
	NextPlot = add
	OuterPosition = [0 0 1 1]
	PlotBoxAspectRatio = [1 1 1]
	PlotBoxAspectRatioMode = auto
	Projection = orthographic
	Position = [0.13 0.11 0.775 0.815]
	TickLength = [0.01 0.025]
	TickDir = in
	TickDirMode = auto
	TightInset = [0.0821429 0.097619 0.00892857 0.0595238]
	Title = [712]
	Units = normalized
	View = [0 90]
	XColor = [0 0 0]
	XDir = normal
	XGrid = on
	XLabel = [713]
	XAxisLocation = bottom
	XLim = [-3 3]
	XLimMode = manual
	XMinorGrid = off
	XMinorTick = off
	XScale = linear
	XTick = [ (1 by 7) double array]
	XTickLabel = 
		-3
		-2
		-1
		0 
		1 
		2 
		3 
	XTickLabelMode = auto
	XTickMode = auto
	YColor = [0 0 0]
	YDir = normal
	YGrid = on
	YLabel = [714]
	YAxisLocation = left
	YLim = [-5 15]
	YLimMode = manual
	YMinorGrid = off
	YMinorTick = off
	YScale = linear
	YTick = [ (1 by 5) double array]
	YTickLabel = 
		-5
		0 
		5 
		10
		15
	YTickLabelMode = auto
	YTickMode = auto
	ZColor = [0 0 0]
	ZDir = normal
	ZGrid = on
	ZLabel = [715]
	ZLim = [-1 1]
	ZLimMode = auto
	ZMinorGrid = off
	ZMinorTick = off
	ZScale = linear
	ZTick = [-1 0 1]
	ZTickLabel = 
	ZTickLabelMode = auto
	ZTickMode = auto

	BeingDeleted = off
	ButtonDownFcn = 
	Children = [ (3 by 1) double array]
	Clipping = on
	CreateFcn = 
	DeleteFcn = 
	BusyAction = queue
	HandleVisibility = on
	HitTest = on
	Interruptible = on
	Parent = [3]
	Selected = off
	SelectionHighlight = on
	Tag = 
	Type = axes
	UIContextMenu = []
	UserData = []
	Visible = on

</pre><p>We can access specific properties using <b>get(handle,'property')</b></p><pre class="codeinput">get(gca,<span class="string">'xtick'</span>)
</pre><pre class="codeoutput">ans =
    -3    -2    -1     0     1     2     3
</pre><p>The command <b>set(handle)</b> lists not only the attributes but also valid potential values.</p><pre class="codeinput">set(gca)
</pre><pre class="codeoutput">	ActivePositionProperty: [ position | {outerposition} ]
	ALim
	ALimMode: [ {auto} | manual ]
	AmbientLightColor
	Box: [ on | {off} ]
	CameraPosition
	CameraPositionMode: [ {auto} | manual ]
	CameraTarget
	CameraTargetMode: [ {auto} | manual ]
	CameraUpVector
	CameraUpVectorMode: [ {auto} | manual ]
	CameraViewAngle
	CameraViewAngleMode: [ {auto} | manual ]
	CLim
	CLimMode: [ {auto} | manual ]
	Color
	ColorOrder
	DataAspectRatio
	DataAspectRatioMode: [ {auto} | manual ]
	DrawMode: [ {normal} | fast ]
	FontAngle: [ {normal} | italic | oblique ]
	FontName
	FontSize
	FontUnits: [ inches | centimeters | normalized | {points} | pixels ]
	FontWeight: [ light | {normal} | demi | bold ]
	GridLineStyle: [ - | -- | {:} | -. | none ]
	Layer: [ top | {bottom} ]
	LineStyleOrder
	LineWidth
	MinorGridLineStyle: [ - | -- | {:} | -. | none ]
	NextPlot: [ new | add | {replace} | replacechildren ]
	OuterPosition
	PlotBoxAspectRatio
	PlotBoxAspectRatioMode: [ {auto} | manual ]
	Projection: [ {orthographic} | perspective ]
	Position
	TickLength
	TickDir: [ {in} | out ]
	TickDirMode: [ {auto} | manual ]
	Title
	Units: [ inches | centimeters | {normalized} | points | pixels | characters ]
	View
	XColor
	XDir: [ {normal} | reverse ]
	XGrid: [ on | {off} ]
	XLabel
	XAxisLocation: [ top | {bottom} ]
	XLim
	XLimMode: [ {auto} | manual ]
	XMinorGrid: [ on | {off} ]
	XMinorTick: [ on | {off} ]
	XScale: [ {linear} | log ]
	XTick
	XTickLabel
	XTickLabelMode: [ {auto} | manual ]
	XTickMode: [ {auto} | manual ]
	YColor
	YDir: [ {normal} | reverse ]
	YGrid: [ on | {off} ]
	YLabel
	YAxisLocation: [ {left} | right ]
	YLim
	YLimMode: [ {auto} | manual ]
	YMinorGrid: [ on | {off} ]
	YMinorTick: [ on | {off} ]
	YScale: [ {linear} | log ]
	YTick
	YTickLabel
	YTickLabelMode: [ {auto} | manual ]
	YTickMode: [ {auto} | manual ]
	ZColor
	ZDir: [ {normal} | reverse ]
	ZGrid: [ on | {off} ]
	ZLabel
	ZLim
	ZLimMode: [ {auto} | manual ]
	ZMinorGrid: [ on | {off} ]
	ZMinorTick: [ on | {off} ]
	ZScale: [ {linear} | log ]
	ZTick
	ZTickLabel
	ZTickLabelMode: [ {auto} | manual ]
	ZTickMode: [ {auto} | manual ]

	ButtonDownFcn: string -or- function handle -or- cell array
	Children
	Clipping: [ {on} | off ]
	CreateFcn: string -or- function handle -or- cell array
	DeleteFcn: string -or- function handle -or- cell array
	BusyAction: [ {queue} | cancel ]
	HandleVisibility: [ {on} | callback | off ]
	HitTest: [ {on} | off ]
	Interruptible: [ {on} | off ]
	Parent
	Selected: [ on | off ]
	SelectionHighlight: [ {on} | off ]
	Tag
	UIContextMenu
	UserData
	Visible: [ {on} | off ]

</pre><p>We can test if a variable is a valid handle or not with the <i>ishandle()</i> method. Figure handles are actually just integer values starting at 1 that have been registered with the root graphics object.</p><p>Below, we use the <i>set()</i> method to change a number of axes attributes. Multiple attributes can be changed in one command, (or in multiple commands if you prefer) and the name of the attribute always precedes its new value.</p><pre class="codeinput">figure(f3);
set(gca,<span class="string">'box'</span>      ,<span class="string">'on'</span>    <span class="keyword">...</span><span class="comment">                             % draw a box around the figure</span>
       ,<span class="string">'LineWidth'</span>, 2      <span class="keyword">...</span><span class="comment">                             % increase the line width</span>
       ,<span class="string">'FontSize'</span> ,12      <span class="keyword">...</span><span class="comment">                             % increase the font size</span>
       ,<span class="string">'XTick'</span>    ,[-3,0,3]<span class="keyword">...</span><span class="comment">                             % only these x-ticks</span>
       ,<span class="string">'YTick'</span>    ,[0,5,10]);                              <span class="comment">% only these y-ticks</span>
Xequal = domain(abs(f(domain) - g(domain)) &lt; 2*res);        <span class="comment">% find where the two graphs meet</span>
p8 = plot(Xequal,f(Xequal),<span class="string">'o'</span>,<span class="string">'MarkerFaceColor'</span>,<span class="string">'g'</span><span class="keyword">...</span><span class="comment">     % plot green circles there</span>
                              ,<span class="string">'MarkerEdgeColor'</span>,<span class="string">'k'</span><span class="keyword">...</span><span class="comment">     % black border around circles</span>
                              ,<span class="string">'LineWidth'</span>      , 2 <span class="keyword">...</span><span class="comment">     % thicken black border</span>
                              ,<span class="string">'MarkerSize'</span>     ,10);       <span class="comment">% increase the circle size</span>
legend([p5,p6,p8],{<span class="string">'f(x) = x^2'</span>,<span class="string">'g(x) = 5*sin(x)+5'</span>,<span class="string">'f(x) == g(x)'</span>},<span class="string">'Location'</span>,<span class="string">'NorthWest'</span>);
<span class="comment">% Prevent close commands from closing this figure. We will use it again later.</span>
<span class="comment">%set(f3,'HandleVisibility','off');</span>
</pre><img vspace="5" hspace="5" src="plotting_07.png" alt=""> <p>As you can see, most plotting commands, such as <i>legend()</i> above, have many possible parameters and parameterizations. It would be redundant to go into them all here; type <b>doc legend</b> ,for example, to see more information on the legend command.</p><p>There are Matlab functions designed to make function plotting easier such as <i>fplot()</i> , <i>ezplot()</i> , <i>ezsurf()</i> , <i>ezmesh()</i> , <i>ezcontour()</i> , etc... While these can be useful for quick and dirty figures, they can make customization more difficult and so we recommend using, and learning to use, <i>plot()</i> instead. All of these functions take function handles as arguements and the ez*** functions auto set the axes limits for you.</p><p>The <i>loglog()</i> , <i>semilogx()</i> , and <i>semilogy()</i> functions are useful for plotting on logarithmic scales. However we can achieve the exact same effect by plotting with <i>plot()</i> and calling <b>set(gca,'XScale','log')</b> and/or <b>set(gca,'YScale','log')</b> .  We can reverse the direction of an axis with <b>set(gca,'YDir','reverse')</b> or <b>set(gca,'XDir','reverse')</b> and move an axis with <b>set(gca,'YAxisLocation','right')</b> or <b>set(gca,'XAxisLocation','top')</b> . Recall that we can find the names of these properties with <b>get(gca)</b> or the valid values with say <b>set(gca,'YDir')</b> .</p><h2>Tickmarks<a name="20"></a></h2><p>We can change the tick marks and their labels as follows on the axes. For example,</p><pre class="codeinput">figure(f1);
xs = linspace(min(X1), max(X1), 5);
set(gca, <span class="string">'xtick'</span>, xs, <span class="string">'xticklabel'</span>, {<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>}) <span class="comment">% gca = get current axis</span>
</pre><img vspace="5" hspace="5" src="plotting_08.png" alt=""> <p>When we have long strings for the tick marks, we can use <a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=3150&amp;objectType=file">xticklabelrot</a>, which prints them at an angle to save space.</p><pre class="codeinput">figure(f1); xticklabelRot({<span class="string">'foo'</span>,<span class="string">'bar'</span>,22,<span class="string">'apple'</span>,<span class="string">'long string'</span>}, 45)
</pre><pre class="codeoutput">Warning: You may need to manually reset the XLABEL
vertical position 
</pre><img vspace="5" hspace="5" src="plotting_09.png" alt=""> <h2>Histograms<a name="23"></a></h2><p>Histograms are one of the most useful plots for 1d data, and for probability mass functions. Below we display a histogram of a hypothetical class grade distribution.</p><pre class="codeinput">figure;
grades = fix(normrnd(70,10,100,1));
hist(grades);                               <span class="comment">% plot the histogram</span>
xlabel(<span class="string">'percent'</span>); ylabel(<span class="string">'count'</span>);
title(<span class="string">'grade distribution'</span>);
set(gca,<span class="string">'XLim'</span>,[0,100],<span class="string">'YGrid'</span>,<span class="string">'on'</span>); <span class="comment">% gca = get current axis</span>
set(gca,<span class="string">'YMinorTick'</span>,<span class="string">'on'</span>);
</pre><img vspace="5" hspace="5" src="plotting_10.png" alt=""> <p>Here we organize marks into bins representing letter grades. We use the extremely quick <i>histc()</i> function to count the number of data points that fall between specified edges. Once we have obtained the counts, we can visualize them with the <i>bar()</i> function.</p><pre class="codeinput">figure;
bins = [0,50,55,60,64,68,72,76,80,85,90,inf];                   <span class="comment">% The bins</span>
letters = {<span class="string">'F'</span>,<span class="string">'D'</span>,<span class="string">'C-'</span>,<span class="string">'C'</span>,<span class="string">'C+'</span>,<span class="string">'B-'</span>,<span class="string">'B'</span>,<span class="string">'B+'</span>,<span class="string">'A-'</span>,<span class="string">'A'</span>,<span class="string">'A+'</span>};  <span class="comment">% The labels</span>
counts = histc(grades,bins);                                    <span class="comment">% count grades</span>
bar(counts(1:end-1));                                           <span class="comment">% plot counts</span>
set(gca,<span class="string">'XTickLabel'</span>,letters,<span class="string">'Ygrid'</span>,<span class="string">'on'</span>);                     <span class="comment">% set tick labels</span>
xlabel(<span class="string">'grade'</span>); ylabel(<span class="string">'count'</span>);
title(<span class="string">'grade distribution'</span>);
set(gca,<span class="string">'YMinorTick'</span>,<span class="string">'on'</span>)
</pre><img vspace="5" hspace="5" src="plotting_11.png" alt=""> <h2>Plotting 1d probability density functions<a name="26"></a></h2><p>As an example of some other functions,  we make a fancy plot of the Gaussian pdf in which we shade the tails using an <i>area()</i> plot, and add a few vertical bars using the <i>stem()</i> command.</p><pre class="codeinput">figure;
domain = -4:0.01:4;
plot(domain,normpdf(domain),<span class="string">'-r'</span>,<span class="string">'LineWidth'</span>,3);
hold <span class="string">on</span>
<span class="comment">% We shade two regions with the area command</span>
L = fix(length(domain))/3;
R = 2*fix(length(domain))/3;
area(domain(1:L),normpdf(domain(1:L)));
area(domain(R:end),normpdf(domain(R:end)));
<span class="comment">% Now add gratuitous vertical lines</span>
stem([-0.7,0.1,0.4],normpdf([-0.7,0.1,0.4]),<span class="string">'LineWidth'</span>,2);
axis([-4,4,0,0.5]);
set(gca,<span class="string">'XMinorTick'</span>,<span class="string">'on'</span>);
set(gca,<span class="string">'YMinorTick'</span>,<span class="string">'on'</span>);
</pre><img vspace="5" hspace="5" src="plotting_12.png" alt=""> <h2>Plotting images<a name="27"></a></h2><p>The <i>imagesc()</i> function can be used to view an image. (If you have the image processing toolbox, you can use <b>imshow</b> instead.)</p><pre class="codeinput">load <span class="string">mandrill</span> <span class="comment">% built-in image</span>
figure; imagesc(X);                         <span class="comment">% display it</span>
axis <span class="string">image</span>                                  <span class="comment">% window dimensions appropriate for an imag</span>
map = colormap(gray);                       <span class="comment">% a possible color scheme.</span>
axis <span class="string">off</span>
</pre><img vspace="5" hspace="5" src="plotting_13.png" alt=""> <h2>Heatmaps and Hinton diagrams<a name="29"></a></h2><p>We can also use <i>imagesc</i> to make <b>heatmaps</b> of a 2d matrix.</p><pre class="codeinput">figure;
rand(<span class="string">'twister'</span>,1);
X = randn(10,10);
imagesc(X);
colorbar
</pre><img vspace="5" hspace="5" src="plotting_14.png" alt=""> <p>Often it is preferable to use <a href="mfiles/graphics/hintonDiagram.m">hintonDiagram</a> (named after Geoff Hinton, who used this type of display to plot the weight matrix of a neural network), where the size of the square represents the magnitude, and the color represents the polarity (red = positive, green = negative).</p><pre class="codeinput">figure;
hintonDiagram(X)
</pre><img vspace="5" hspace="5" src="plotting_15.png" alt=""> <h2>Saving and Printing<a name="32"></a></h2><p>We can print figures and save them as any major graphics type from the file drop down menu of a figure window. Also here is the 'export setup' option which opens a window where the default figure resolution and size settings can be set. Newer versions of Matlab also let you automatically increase the line widths and font sizes of the figures you are exporting. To save or print programatically, we can use the <i>print()</i> function. Type <b>doc print</b> for more details.</p><pre class="codeinput"><span class="comment">%figure(gcf);</span>
<span class="comment">%print -djpeg test.jpg</span>
<span class="comment">%print(gcf, '-djpeg', 'test.jpg');  % equivalent, useful if filename is a variable</span>
</pre><p>If you find that there is too much white space surrounding the exported figure, (a particular problem when exporting to pdf) try changing the figure's paper size before exporting, with the following commands.</p><pre class="codeinput"><span class="comment">%pos = get(gcf,'Position');</span>
<span class="comment">%set(gcf,'PaperSize',pos(3:4));</span>
<span class="comment">%set(gcf,'PaperPositionMode','auto');</span>
</pre><p>Matt Dunham has written a handy function <a href="mfiles/graphics/pdfcrop.m">pdfcrop</a> that automatically ensures the paper size is set equal to the figure size, so that pdf files have a tight border.</p><pre class="codeinput"><span class="comment">%pdfcrop(gcf);</span>
<span class="comment">%print(gcf, '-dpdf', 'test.pdf');</span>
</pre><p>Another very useful function is <a href="http://www.mathworks.com/matlabcentral/fileexchange/727">exportfig</a> which will automatically make your fonts larger, etc, before  saving to a file for use in a publication.</p><h2>PlaceFigures<a name="39"></a></h2><p>When many figures are generated at once, they will often overlap each other. You can manually drag them around, but Matt Dunham's <a href="mfiles/graphics/placeFigures.m">placeFigures</a> function automatically places the figures on the screen for you in a way that allows you to see them all simultaneously. Simply call <i>placeFigures</i> after generating the figures. You can specify the layout manually with say <i>placeFigures('nrows',2,'ncols',4)</i> , create new blank figures with the 'newfigs' option and display figures on a second monitor with the 'monitor' option. See the function documentation for more information. (Note that by automatically creating this web page with <i>publish</i>, the layout of the figures looks somewhat different than on the screen.)</p><pre class="codeinput"><span class="comment">%close all</span>
<span class="comment">%for i=1:10</span>
<span class="comment">%  figure; imagesc(rand(10,10));</span>
<span class="comment">%end</span>
placeFigures
</pre><pre class="codeoutput">ans =
  173.0074    3.0000    6.0000    9.0000
    2.0000    1.0000    7.0000   10.0000
    4.0000    5.0000    8.0000   -1.0000
</pre><img vspace="5" hspace="5" src="plotting_16.png" alt=""> <img vspace="5" hspace="5" src="plotting_17.png" alt=""> <img vspace="5" hspace="5" src="plotting_18.png" alt=""> <img vspace="5" hspace="5" src="plotting_19.png" alt=""> <img vspace="5" hspace="5" src="plotting_20.png" alt=""> <img vspace="5" hspace="5" src="plotting_21.png" alt=""> <img vspace="5" hspace="5" src="plotting_22.png" alt=""> <img vspace="5" hspace="5" src="plotting_23.png" alt=""> <img vspace="5" hspace="5" src="plotting_24.png" alt=""> <img vspace="5" hspace="5" src="plotting_25.png" alt=""> <img vspace="5" hspace="5" src="plotting_26.png" alt=""> <p class="footer"><br>
      Published with MATLAB&reg; 7.10<br></p></div><!--
##### SOURCE BEGIN #####
%% Plotting
% Matlab has excellent support for data visualization and graphics with
% over 70 types of plots currently available. We won't be able to go into
% all of them here, nor will we need to, as they all operate in very
% similar ways. In fact, by understanding how Matlab plotting works in
% general, we'll be able to see most plot types as simple variations of
% each other. Fundamentally, they all use the same basic constructs. 
% Rather than explain all this in detail, we will just give some
% useful examples; it should be pretty clear what is going on from context.
%% Scatter plots for 2D Data
% Here we show how to plot some random 2d data.
rand('twister',0);                               % seed the random number generator
X = 5*rand(100,1);  y = rand*X + rand(100,1);    % generate some synthetic data
f1 = figure;                                     % create a blank figure
p1 = plot(X,y,'.');                              % plot X vs y
X1 = X;
%%
% We have told Matlab to plot the data in X vs the data in y and to display
% a blue solid dot for each data point. There are many different types of
% marker and line styles available. For a complete list type *doc
% linespec*. Lets make a few changes. 
clf(f1);                                         % clear the figure
p2 = plot(X,y,'o','MarkerEdgeColor','k',...      % plot larger red circles with black edges
                  'MarkerFaceColor','r',...           
                  'MarkerSize',8);
%% Title and axis labels
% We can specify the axis range and labels as follows.
axis([-1,6,-1,5]);  
xlabel('x'); ylabel('y');title('this is the title');
%% Plotting  curves
% Plotting functions (curves) is very similar to the data plotting we just performed. 
% We evaluate the function at every
% point along its domain and plot the resulting x,y pairs, connecting
% consecutive dots. Here we plot two functions on the same set of axes.
% The *hold on* command tells Matlab to superimpose all the plots
% onto the same figure, rather than overwriting previous plots.
f = @(x) x.^2;                  % create a function of x, namely f(x) = x.^2
g = @(x) 5*sin(x)+5;            % create a second function of x, g(x) = 5*sin(x) + 5
res = 0.001;                    % resolution of the plot
domain = -pi:res:pi;            % the domain of x, (i.e. points at which to evaluate f,g)
f2 = figure;                    % open a new figure
p3 = plot(domain,f(domain));    % plot f, w.r.t. x over its domain
hold on;                        % tell Matlab to add future plots to the same set of axes
p4 = plot(domain,g(domain));    % plot the second function.             
%%
% Not bad for a first attempt but there are a lot of improvements we could
% make. Lets try again but this time, we will plot each function in its own
% color, change the line widths and types, the tick marks, the range of the
% axes, the background color, the font size, and add labels, a title, and a
% legend. We'll keep the functions and domain the same. Let us also add
% error bars to one of the functions denoting one standard deviation of the
% dependent variable.
f3 = figure('Color',[1,1,1]); hold on;             % new figure with a white background
p5 = plot(domain,f(domain),'REPLACE_WITH_DASH_DASHr','LineWidth',3);   % plot a thick dashed red line
p6 = plot(domain,g(domain),'-b','LineWidth',3);    % plot a thick solid blue line
subdomain = domain(1:400:end);                     % we will plot error bars at every 400th point
oneSTD = std(g(domain));                           % standard deviation of g(domain)
oneSTD = oneSTD*ones(size(subdomain));             % make correct size, as needed by errorbar
p7 = errorbar(subdomain,g(subdomain),oneSTD);      % plot the error bars
title('example figure','FontSize',12);             % add a title
xlabel('distance','FontSize',12);                  % label the horizontal axis
ylabel('height','FontSize',12);                    % label the vertical axis
axis([-3,3,-5,15]);                                % set the axis range
grid on;                                           % add grid lines
legend('f', 'g');
%% Subplots
% We often want to plot multiple subfigures within a larger one.
% We can write *subplot(nr,nc,i)* to make an nr * nc plot.
% This command selects the i'th such subplot, numbered from left to right,
% top to bottom. Kevin Murphy's <mfiles/graphics/subplot2.m subplot2> function
% is sometime more convenient: you write *subplot2(nr,nc,i,j)* to select
% the subplot in row i, column j.
% Drea Thomas' <mfiles/graphics/suptitle.m suptitle> function
% can be used to provide a title for all the plots.
% Below we give an example.
%%
figure;
for i=1:6
  subplot(2,3,i);
  hist(rand(1,100),10);
  title(sprintf('subplot %d', i));
end
suptitle('master title')
%% Handles and Customization
% Figure generation in Matlab is object oriented. Figures are top level
% objects and contain other objects such as axes and annotations. Axes 
% further contain sub-objects such as plots and labels, which are often
% built up from smaller objects too. All of these objects have attributes
% that can be retrieved and, (for the most part) changed, using the _get()_
% and _set()_ commands. The first parameter to these functions is a handle
% to an object. We can obtain such handles when we create the objects as in
% _fig = figure_. 
%%
% After the fact, we can obtain the handle to the current figure by using
% the _gcf()_ command or to the current set of axes by using the _gca()_
% command.  We can see a list of all of the
% attributes of an object by typing *get(handle)* at the command prompt.
%%
figure(f3);
get(gca)
%%
% We can access specific properties using *get(handle,'property')*
%%
get(gca,'xtick')
%%
% The command *set(handle)* lists not only the attributes but also valid
% potential values.
%%
set(gca)
%%
% We can test if a variable is a valid handle or not with the _ishandle()_
% method. Figure handles are actually just integer values starting at 1
% that have been registered with the root graphics object. 
%%
% Below, we use the _set()_ method to change a number of axes attributes.
% Multiple attributes can be changed in one command, (or in multiple
% commands if you prefer) and the name of the attribute always precedes its
% new value. 
figure(f3);
set(gca,'box'      ,'on'    ...                             % draw a box around the figure
       ,'LineWidth', 2      ...                             % increase the line width
       ,'FontSize' ,12      ...                             % increase the font size
       ,'XTick'    ,[-3,0,3]...                             % only these x-ticks
       ,'YTick'    ,[0,5,10]);                              % only these y-ticks
Xequal = domain(abs(f(domain) - g(domain)) < 2*res);        % find where the two graphs meet
p8 = plot(Xequal,f(Xequal),'o','MarkerFaceColor','g'...     % plot green circles there
                              ,'MarkerEdgeColor','k'...     % black border around circles
                              ,'LineWidth'      , 2 ...     % thicken black border
                              ,'MarkerSize'     ,10);       % increase the circle size
legend([p5,p6,p8],{'f(x) = x^2','g(x) = 5*sin(x)+5','f(x) == g(x)'},'Location','NorthWest');
% Prevent close commands from closing this figure. We will use it again later. 
%set(f3,'HandleVisibility','off');                         
%%
% As you can see, most plotting commands, such as _legend()_ above, have many
% possible parameters and parameterizations. It would be redundant to go
% into them all here; type *doc legend* ,for example, to see more information 
% on the legend command.
%%
% There are Matlab functions designed to make function plotting easier such
% as _fplot()_ , _ezplot()_ , _ezsurf()_ , _ezmesh()_ , _ezcontour()_ ,
% etc... While these can be useful for quick and dirty figures, they can
% make customization more difficult and so we recommend using, and learning
% to use, _plot()_ instead. All of these functions take function handles as
% arguements and the ez*** functions auto set the axes limits for you. 
%%
% The _loglog()_ , _semilogx()_ , and _semilogy()_ functions are useful for
% plotting on logarithmic scales. However we can achieve the exact same
% effect by plotting with _plot()_ and calling *set(gca,'XScale','log')*
% and/or *set(gca,'YScale','log')* .  We can reverse the direction of an
% axis with *set(gca,'YDir','reverse')* or *set(gca,'XDir','reverse')* and
% move an axis with *set(gca,'YAxisLocation','right')* or
% *set(gca,'XAxisLocation','top')* . Recall that we can find the names of
% these properties with *get(gca)* or the valid values with say
% *set(gca,'YDir')* .
%% Tickmarks
% We can change the tick marks and their labels as follows on the axes.
% For example,
figure(f1);
xs = linspace(min(X1), max(X1), 5);
set(gca, 'xtick', xs, 'xticklabel', {'a','b','c','d'}) % gca = get current axis
%%
% When we have long strings for the tick marks,
% we can use
% <http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=3150&objectType=file xticklabelrot>,
% which prints them at an angle to save space.
%%
figure(f1); xticklabelRot({'foo','bar',22,'apple','long string'}, 45)
%% Histograms
% Histograms are one of the most useful plots for 1d data,
% and for probability mass functions.
% Below we display a histogram of a hypothetical class grade distribution. 
figure;
grades = fix(normrnd(70,10,100,1));     
hist(grades);                               % plot the histogram
xlabel('percent'); ylabel('count');
title('grade distribution');
set(gca,'XLim',[0,100],'YGrid','on'); % gca = get current axis
set(gca,'YMinorTick','on');
%%
% Here we organize marks into bins representing letter grades. We use the
% extremely quick _histc()_ function to count the number of data points that
% fall between specified edges. Once we have obtained the counts, we
% can visualize them with the _bar()_ function. 
figure;
bins = [0,50,55,60,64,68,72,76,80,85,90,inf];                   % The bins
letters = {'F','D','C-','C','C+','B-','B','B+','A-','A','A+'};  % The labels
counts = histc(grades,bins);                                    % count grades
bar(counts(1:end-1));                                           % plot counts
set(gca,'XTickLabel',letters,'Ygrid','on');                     % set tick labels
xlabel('grade'); ylabel('count'); 
title('grade distribution');
set(gca,'YMinorTick','on')
%%
%% Plotting 1d probability density functions
% As an example of some other functions,
%  we make a fancy plot of the Gaussian pdf in which we
% shade the tails using an _area()_ plot,
% and add a few vertical bars using the _stem()_ command.
figure;
domain = -4:0.01:4;
plot(domain,normpdf(domain),'-r','LineWidth',3);
hold on
% We shade two regions with the area command
L = fix(length(domain))/3;
R = 2*fix(length(domain))/3;
area(domain(1:L),normpdf(domain(1:L))); 
area(domain(R:end),normpdf(domain(R:end)));
% Now add gratuitous vertical lines
stem([-0.7,0.1,0.4],normpdf([-0.7,0.1,0.4]),'LineWidth',2);
axis([-4,4,0,0.5]);
set(gca,'XMinorTick','on');               
set(gca,'YMinorTick','on');
%% Plotting images 
% The _imagesc()_ function can be used to view an image.
% (If you have the image processing toolbox, you can use *imshow* instead.)
%%
load mandrill % built-in image
figure; imagesc(X);                         % display it
axis image                                  % window dimensions appropriate for an imag
map = colormap(gray);                       % a possible color scheme.
axis off
%% Heatmaps and Hinton diagrams
% We can also use _imagesc_ to make *heatmaps* of a 2d matrix.
figure; 
rand('twister',1);
X = randn(10,10);
imagesc(X);
colorbar
%%
% Often it is preferable to use
% <mfiles/graphics/hintonDiagram.m hintonDiagram> (named after Geoff Hinton,
% who used this type of display to plot the weight matrix of a neural network),
% where the size
% of the square represents the magnitude, and the color
% represents the polarity (red = positive, green = negative).
%%
figure;
hintonDiagram(X)

%% Saving and Printing
% We can print figures and save them as any major graphics type from the
% file drop down menu of a figure window. Also here is the 'export setup'
% option which opens a window where the default figure resolution and size
% settings can be set. Newer versions of Matlab also let you automatically
% increase the line widths and font sizes of the figures you are exporting.
% To save or print programatically, we can use the _print()_ function.
% Type *doc print* for more details. 
%%
%figure(gcf);
%print -djpeg test.jpg     
%print(gcf, '-djpeg', 'test.jpg');  % equivalent, useful if filename is a variable
%% 
% If you find that there is too much white space surrounding the exported
% figure, (a particular problem when exporting to pdf) try changing the
% figure's paper size before exporting, with the following commands.
%%
%pos = get(gcf,'Position');
%set(gcf,'PaperSize',pos(3:4));
%set(gcf,'PaperPositionMode','auto');
%%
% Matt Dunham has written a handy function <mfiles/graphics/pdfcrop.m pdfcrop>
% that automatically ensures the paper size is set equal to the figure
% size, so that pdf files have a tight border.
%%
%pdfcrop(gcf);
%print(gcf, '-dpdf', 'test.pdf');
%%
% Another very useful function is
% <http://www.mathworks.com/matlabcentral/fileexchange/727 exportfig>
% which will automatically make your fonts larger, etc, before
%  saving to a file for use in a publication.

%% PlaceFigures
% When many figures are generated at once, they will often overlap
% each other. You can manually drag them around, but
% Matt Dunham's <mfiles/graphics/placeFigures.m placeFigures> function
% automatically places the figures on the screen for you in a way
% that allows you to see them all simultaneously. Simply call
% _placeFigures_ after generating the figures. You can specify the layout
% manually with say _placeFigures('nrows',2,'ncols',4)_ , create new blank
% figures with the 'newfigs' option and display figures on a second monitor
% with the 'monitor' option. See the function documentation for more
% information.
% (Note that by automatically creating this web page with _publish_,
% the layout of the figures looks somewhat different than on the screen.)
%%
%close all
%for i=1:10
%  figure; imagesc(rand(10,10));
%end
placeFigures


##### SOURCE END #####
--></body></html>